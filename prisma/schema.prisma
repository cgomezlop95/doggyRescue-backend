// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id               String            @id @default(uuid())
  email            String            @unique
  password         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  isAdmin          Boolean           @default(false)
  firstName        String?
  lastName         String?
  phoneNumber      String?
  userPhotoURL      String?
  adoptionRequests adoptionRequest[]
}

model Dog {
  id                      String            @id @default(uuid())
  createdAt               DateTime          @default(now())
  updatedAt               DateTime          @updatedAt
  dogName                 String
  dogAge                  Float
  dogWeight               Float
  dogSex                  String
  dogBreed                String
  dogAdopted              Boolean
  suitableForKids         Boolean?
  suitableForOtherPets    Boolean?
  dogDescription          String?
  potentiallyDangerousDog Boolean?
  isVaccinated            Boolean?
  isSterilized            Boolean?
  dogPhotoURL             String?
  longitude               Float?
  latitude                Float?
  adoptionRequests        adoptionRequest[]
}

model adoptionRequest {
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  requestApproved    Boolean?
  adopterAge         Int
  hasExperience      Boolean
  dailyHoursAway     Int
  hasOtherPets       Boolean
  OtherPets          String?
  hasKids            Boolean
  hasGarden          Boolean
  numberOfTrips      Int
  monthlyMoney       Int
  numberOfPeople     Int
  adopterDescription String
  userId             String
  user               User     @relation(fields: [userId], references: [id])
  dogId              String
  dog                Dog      @relation(fields: [dogId], references: [id])

  @@id([userId, dogId])
}
